trigger: none

# no PR triggers
pr: none

pool:
  vmImage: ubuntu-latest

steps:
- task: Npm@1
  displayName: 'npm install'
  inputs:
    command: 'install'
    workingDir: 'src'

- task: Npm@1
  displayName: 'npm run test'
  inputs:
    command: 'custom'
    workingDir: 'src'
    customCommand: 'run test --no-watch --no-progress --browsers=ChromeHeadlessCI'
  enabled: false

- task: CmdLine@2
  displayName: 'Find path of Test result file'
  inputs:
    script: |
      find -type f -name *.xml
      echo "cd $(System.DefaultWorkingDirectory)/src/junit"
      cd $(System.DefaultWorkingDirectory)/src/junit
      echo "ls $(System.DefaultWorkingDirectory)/src/junit"
      ls
  enabled: false

- task: PublishTestResults@2
  displayName: 'Publish Angular Test Results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'TESTS-*.xml'
    searchFolder: $(System.DefaultWorkingDirectory)/src/junit
    testRunTitle: 'Angular'
  enabled: false

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonar-cloud'
    organization: 'changdinh'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'changdinh_shopping-cart'
    cliProjectName: 'shopping-cart'
    cliSources: '.'
    
# - task: SonarCloudPrepare@1
#   inputs:
#     SonarCloud: 'sonar-cloud'
#     organization: 'changdinh'
#     scannerMode: 'MSBuild'
#     projectKey: 'changdinh_shopping-cart'
#     projectName: 'shopping-cart'

- task: Npm@1
  displayName: 'npm run build'
  inputs:
    command: 'custom'
    workingDir: 'src'
    customCommand: 'run build'

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: 'dist/shopping-cart'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: Docker@2
  displayName: Build and push an image to container registry
  inputs:
    containerRegistry: 'dmacroperationglobaldev'
    repository: 'poc3'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
  enabled: false